//
// auto-generated by op2.py
//

//user function
__device__ void NumericalFluxes_gpu( float *left,
              float *right,
              const float *edgeFluxes,
              const float *bathySource,
              const float *edgeNormals, const int *isRightBoundary,
              const float *cellVolumes0,
              const float *cellVolumes1) {
  left[0] -= (edgeFluxes[0])/cellVolumes0[0];
  left[1] -= (edgeFluxes[1] + bathySource[0] * edgeNormals[0])/cellVolumes0[0];
  left[2] -= (edgeFluxes[2] + bathySource[0] * edgeNormals[1])/cellVolumes0[0];

  left[1] += (bathySource[2] *edgeNormals[0])/cellVolumes0[0];
  left[2] += (bathySource[2] *edgeNormals[1])/cellVolumes0[0];
  if (!*isRightBoundary) {
    right[0] += edgeFluxes[0]/cellVolumes1[0];
    right[1] += (edgeFluxes[1] + bathySource[1] * edgeNormals[0])/cellVolumes1[0];
    right[2] += (edgeFluxes[2] + bathySource[1] * edgeNormals[1])/cellVolumes1[0];

    right[1] -= (bathySource[3] *edgeNormals[0])/cellVolumes1[0];
    right[2] -= (bathySource[3] *edgeNormals[1])/cellVolumes1[0];
   } else {
   right[0] += 0.0f;
   right[1] += 0.0f;
   right[2] += 0.0f;
  }


}

// CUDA kernel function
__global__ void op_cuda_NumericalFluxes(
  float *__restrict ind_arg0,
  const float *__restrict ind_arg1,
  const int *__restrict opDat0Map,
  const float *__restrict arg2,
  const float *__restrict arg3,
  const float *__restrict arg4,
  const int *__restrict arg5,
  int   *ind_map,
  short *arg_map,
  int   *ind_arg_sizes,
  int   *ind_arg_offs,
  int    block_offset,
  int   *blkmap,
  int   *offset,
  int   *nelems,
  int   *ncolors,
  int   *colors,
  int   nblocks,
  int   set_size) {
  float arg0_l[4];
  float arg1_l[4];

  __shared__  int  *ind_arg0_map, ind_arg0_size;
  __shared__  float *ind_arg0_s;

  __shared__ int    nelems2, ncolor;
  __shared__ int    nelem, offset_b;

  extern __shared__ char shared[];

  if (blockIdx.x+blockIdx.y*gridDim.x >= nblocks) {
    return;
  }
  if (threadIdx.x==0) {

    //get sizes and shift pointers and direct-mapped data

    int blockId = blkmap[blockIdx.x + blockIdx.y*gridDim.x  + block_offset];

    nelem    = nelems[blockId];
    offset_b = offset[blockId];

    nelems2  = blockDim.x*(1+(nelem-1)/blockDim.x);
    ncolor   = ncolors[blockId];

    ind_arg0_size = ind_arg_sizes[0+blockId*1];

    ind_arg0_map = &ind_map[0*set_size] + ind_arg_offs[0+blockId*1];

    //set shared memory pointers
    int nbytes = 0;
    ind_arg0_s = (float *) &shared[nbytes];
  }
  __syncthreads(); // make sure all of above completed

  for ( int n=threadIdx.x; n<ind_arg0_size*4; n+=blockDim.x ){
    ind_arg0_s[n] = ZERO_float;
  }

  __syncthreads();

  for ( int n=threadIdx.x; n<nelems2; n+=blockDim.x ){
    int col2 = -1;
    int map0idx;
    int map1idx;
    if (n<nelem) {
      //initialise local variables
      for ( int d=0; d<4; d++ ){
        arg0_l[d] = ZERO_float;
      }
      for ( int d=0; d<4; d++ ){
        arg1_l[d] = ZERO_float;
      }
      map0idx = opDat0Map[n + offset_b + set_size * 0];
      map1idx = opDat0Map[n + offset_b + set_size * 1];


      //user-supplied kernel call
      NumericalFluxes_gpu(arg0_l,
                    arg1_l,
                    arg2+(n+offset_b)*3,
                    arg3+(n+offset_b)*4,
                    arg4+(n+offset_b)*2,
                    arg5+(n+offset_b)*1,
                    ind_arg1+map0idx*1,
                    ind_arg1+map1idx*1);
      col2 = colors[n+offset_b];
    }

    //store local variables

    int arg0_map;
    int arg1_map;
    if (col2>=0) {
      arg0_map = arg_map[0*set_size+n+offset_b];
      arg1_map = arg_map[1*set_size+n+offset_b];
    }

    for ( int col=0; col<ncolor; col++ ){
      if (col2==col) {
        arg0_l[0] += ind_arg0_s[0+arg0_map*4];
        arg0_l[1] += ind_arg0_s[1+arg0_map*4];
        arg0_l[2] += ind_arg0_s[2+arg0_map*4];
        arg0_l[3] += ind_arg0_s[3+arg0_map*4];
        ind_arg0_s[0+arg0_map*4] = arg0_l[0];
        ind_arg0_s[1+arg0_map*4] = arg0_l[1];
        ind_arg0_s[2+arg0_map*4] = arg0_l[2];
        ind_arg0_s[3+arg0_map*4] = arg0_l[3];
        arg1_l[0] += ind_arg0_s[0+arg1_map*4];
        arg1_l[1] += ind_arg0_s[1+arg1_map*4];
        arg1_l[2] += ind_arg0_s[2+arg1_map*4];
        arg1_l[3] += ind_arg0_s[3+arg1_map*4];
        ind_arg0_s[0+arg1_map*4] = arg1_l[0];
        ind_arg0_s[1+arg1_map*4] = arg1_l[1];
        ind_arg0_s[2+arg1_map*4] = arg1_l[2];
        ind_arg0_s[3+arg1_map*4] = arg1_l[3];
      }
      __syncthreads();
    }
  }
  for ( int n=threadIdx.x; n<ind_arg0_size*4; n+=blockDim.x ){
    ind_arg0[n%4+ind_arg0_map[n/4]*4] += ind_arg0_s[n];
  }
}


//host stub function
void op_par_loop_NumericalFluxes(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7){

  int nargs = 8;
  op_arg args[8];

  args[0] = arg0;
  args[1] = arg1;
  args[2] = arg2;
  args[3] = arg3;
  args[4] = arg4;
  args[5] = arg5;
  args[6] = arg6;
  args[7] = arg7;

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(8);
  op_timers_core(&cpu_t1, &wall_t1);
  OP_kernels[8].name      = name;
  OP_kernels[8].count    += 1;


  int    ninds   = 2;
  int    inds[8] = {0,0,-1,-1,-1,-1,1,1};

  if (OP_diags>2) {
    printf(" kernel routine with indirection: NumericalFluxes\n");
  }

  //get plan
  #ifdef OP_PART_SIZE_8
    int part_size = OP_PART_SIZE_8;
  #else
    int part_size = OP_part_size;
  #endif

  int set_size = op_mpi_halo_exchanges_grouped(set, nargs, args, 2);
  if (set_size > 0) {

    op_plan *Plan = op_plan_get_stage(name,set,part_size,nargs,args,ninds,inds,OP_STAGE_INC);

    //execute plan

    int block_offset = 0;
    for ( int col=0; col<Plan->ncolors; col++ ){
      if (col==Plan->ncolors_core) {
        op_mpi_wait_all_grouped(nargs, args, 2);
      }
      #ifdef OP_BLOCK_SIZE_8
      int nthread = OP_BLOCK_SIZE_8;
      #else
      int nthread = OP_block_size;
      #endif

      dim3 nblocks = dim3(Plan->ncolblk[col] >= (1<<16) ? 65535 : Plan->ncolblk[col],
      Plan->ncolblk[col] >= (1<<16) ? (Plan->ncolblk[col]-1)/65535+1: 1, 1);
      if (Plan->ncolblk[col] > 0) {
        int nshared = Plan->nsharedCol[col];
        op_cuda_NumericalFluxes<<<nblocks,nthread,nshared>>>(
        (float *)arg0.data_d,
        (float *)arg6.data_d,
        arg0.map_data_d,
        (float*)arg2.data_d,
        (float*)arg3.data_d,
        (float*)arg4.data_d,
        (int*)arg5.data_d,
        Plan->ind_map,
        Plan->loc_map,
        Plan->ind_sizes,
        Plan->ind_offs,
        block_offset,
        Plan->blkmap,
        Plan->offset,
        Plan->nelems,
        Plan->nthrcol,
        Plan->thrcol,
        Plan->ncolblk[col],
        set->size+set->exec_size);

      }
      block_offset += Plan->ncolblk[col];
    }
    OP_kernels[8].transfer  += Plan->transfer;
    OP_kernels[8].transfer2 += Plan->transfer2;
  }
  op_mpi_set_dirtybit_cuda(nargs, args);
  if (OP_diags>1) {
    cutilSafeCall(cudaDeviceSynchronize());
  }
  //update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[8].time     += wall_t2 - wall_t1;
}
