//
// auto-generated by op2.py
//

//user function
__device__ void NumericalFluxes_sph_gpu( float *left,
              float *right,
              const float *leftcellCenters, const float *rightcellCenters,
              const float *edgeFluxes,
              const float *bathySource,
              const float *edgeNormals, const int *isRightBoundary,
              const float *cellVolumes0,
              const float *cellVolumes1) {
  left[0] -= (edgeFluxes[0])/(Radius_cuda*cellVolumes0[0]);
  left[1] -= (edgeFluxes[1] + bathySource[0] * edgeNormals[0])/(Radius_cuda*cellVolumes0[0]*cos(M_PI*leftcellCenters[1]/180.0));
  left[2] -= (edgeFluxes[2] + bathySource[0] * edgeNormals[1])/(Radius_cuda*cellVolumes0[0]);

  left[1] += (bathySource[2] *edgeNormals[0])/(Radius_cuda*cellVolumes0[0]*cos(M_PI*leftcellCenters[1]/180.0));
  left[2] += (bathySource[2] *edgeNormals[1])/(Radius_cuda*cellVolumes0[0]);
  if (!*isRightBoundary) {
    right[0] += edgeFluxes[0]/cellVolumes1[0];
    right[1] += (edgeFluxes[1] + bathySource[1] * edgeNormals[0])/(Radius_cuda*cellVolumes1[0]*cos(M_PI*rightcellCenters[1]/180.0));
    right[2] += (edgeFluxes[2] + bathySource[1] * edgeNormals[1])/(Radius_cuda*cellVolumes1[0]);

    right[1] -= (bathySource[3] *edgeNormals[0])/(Radius_cuda*cellVolumes1[0]*cos(M_PI*rightcellCenters[1]/180.0));
    right[2] -= (bathySource[3] *edgeNormals[1])/(Radius_cuda*cellVolumes1[0]);
   } else {
   right[0] += 0.0f;
   right[1] += 0.0f;
   right[2] += 0.0f;
  }


}

// CUDA kernel function
__global__ void op_cuda_NumericalFluxes_sph(
  float *__restrict ind_arg0,
  const float *__restrict ind_arg1,
  const float *__restrict ind_arg2,
  const int *__restrict opDat0Map,
  const float *__restrict arg4,
  const float *__restrict arg5,
  const float *__restrict arg6,
  const int *__restrict arg7,
  int start,
  int end,
  int   set_size) {
  int tid = threadIdx.x + blockIdx.x * blockDim.x;
  if (tid + start < end) {
    int n = tid + start;
    //initialise local variables
    float arg0_l[4];
    for ( int d=0; d<4; d++ ){
      arg0_l[d] = ZERO_float;
    }
    float arg1_l[4];
    for ( int d=0; d<4; d++ ){
      arg1_l[d] = ZERO_float;
    }
    int map0idx;
    int map1idx;
    map0idx = opDat0Map[n + set_size * 0];
    map1idx = opDat0Map[n + set_size * 1];

    //user-supplied kernel call
    NumericalFluxes_sph_gpu(arg0_l,
                        arg1_l,
                        ind_arg1+map0idx*2,
                        ind_arg1+map1idx*2,
                        arg4+n*3,
                        arg5+n*4,
                        arg6+n*2,
                        arg7+n*1,
                        ind_arg2+map0idx*1,
                        ind_arg2+map1idx*1);
    atomicAdd(&ind_arg0[0+map0idx*4],arg0_l[0]);
    atomicAdd(&ind_arg0[1+map0idx*4],arg0_l[1]);
    atomicAdd(&ind_arg0[2+map0idx*4],arg0_l[2]);
    atomicAdd(&ind_arg0[3+map0idx*4],arg0_l[3]);
    atomicAdd(&ind_arg0[0+map1idx*4],arg1_l[0]);
    atomicAdd(&ind_arg0[1+map1idx*4],arg1_l[1]);
    atomicAdd(&ind_arg0[2+map1idx*4],arg1_l[2]);
    atomicAdd(&ind_arg0[3+map1idx*4],arg1_l[3]);
  }
}


//host stub function
void op_par_loop_NumericalFluxes_sph(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7,
  op_arg arg8,
  op_arg arg9){

  int nargs = 10;
  op_arg args[10];

  args[0] = arg0;
  args[1] = arg1;
  args[2] = arg2;
  args[3] = arg3;
  args[4] = arg4;
  args[5] = arg5;
  args[6] = arg6;
  args[7] = arg7;
  args[8] = arg8;
  args[9] = arg9;

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(10);
  op_timers_core(&cpu_t1, &wall_t1);
  OP_kernels[10].name      = name;
  OP_kernels[10].count    += 1;


  int    ninds   = 3;
  int    inds[10] = {0,0,1,1,-1,-1,-1,-1,2,2};

  if (OP_diags>2) {
    printf(" kernel routine with indirection: NumericalFluxes_sph\n");
  }
  int set_size = op_mpi_halo_exchanges_grouped(set, nargs, args, 2);
  if (set_size > 0) {

    //set CUDA execution parameters
    #ifdef OP_BLOCK_SIZE_10
      int nthread = OP_BLOCK_SIZE_10;
    #else
      int nthread = OP_block_size;
    #endif

    for ( int round=0; round<2; round++ ){
      if (round==1) {
        op_mpi_wait_all_grouped(nargs, args, 2);
      }
      int start = round==0 ? 0 : set->core_size;
      int end = round==0 ? set->core_size : set->size + set->exec_size;
      if (end-start>0) {
        int nblocks = (end-start-1)/nthread+1;
        op_cuda_NumericalFluxes_sph<<<nblocks,nthread>>>(
        (float *)arg0.data_d,
        (float *)arg2.data_d,
        (float *)arg8.data_d,
        arg0.map_data_d,
        (float*)arg4.data_d,
        (float*)arg5.data_d,
        (float*)arg6.data_d,
        (int*)arg7.data_d,
        start,end,set->size+set->exec_size);
      }
    }
  }
  op_mpi_set_dirtybit_cuda(nargs, args);
  if (OP_diags>1) {
    cutilSafeCall(cudaDeviceSynchronize());
  }
  //update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[10].time     += wall_t2 - wall_t1;
}
