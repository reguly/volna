//
// auto-generated by op2.py
//

//user function
__device__ void Friction_manning_gpu( const float *dT,const float *M_n,
            float *values) {
  float Fr;
  float TruncatedH = values[0] < EPS_cuda ? EPS_cuda : values[0];
  float u = values[1]/TruncatedH;
  float v = values[2]/TruncatedH;
  float speed = sqrt(u*u + v*v);
  Fr = g_cuda* (*M_n * *M_n) *speed;
  Fr = Fr/(pow(TruncatedH,4.0f/3.0f));



  values[0] = TruncatedH;
  values[3] = values[3];
  if (values[0] <= 1e-3){
     values[1] = 0.0f;
     values[2] = 0.0f;
  } else if (1e-3 < values[0] <= 50.0f) {
     values[1] = values[1] / (1.0f + Fr * *dT);
     values[2] = values[2] / (1.0f + Fr * *dT);
  } else {
     values[1] = values[1];
     values[2] = values[2];
  }

}

// CUDA kernel function
__global__ void op_cuda_Friction_manning(
  const float *arg0,
  const float *arg1,
  float *arg2,
  int   set_size ) {


  //process set elements
  for ( int n=threadIdx.x+blockIdx.x*blockDim.x; n<set_size; n+=blockDim.x*gridDim.x ){

    //user-supplied kernel call
    Friction_manning_gpu(arg0,
                     arg1,
                     arg2+n*4);
  }
}


//host stub function
void op_par_loop_Friction_manning(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2){

  float*arg0h = (float *)arg0.data;
  float*arg1h = (float *)arg1.data;
  int nargs = 3;
  op_arg args[3];

  args[0] = arg0;
  args[1] = arg1;
  args[2] = arg2;

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(2);
  op_timers_core(&cpu_t1, &wall_t1);
  OP_kernels[2].name      = name;
  OP_kernels[2].count    += 1;


  if (OP_diags>2) {
    printf(" kernel routine w/o indirection:  Friction_manning");
  }

  int set_size = op_mpi_halo_exchanges_grouped(set, nargs, args, 2);
  if (set_size > 0) {

    //transfer constants to GPU
    int consts_bytes = 0;
    consts_bytes += ROUND_UP(1*sizeof(float));
    consts_bytes += ROUND_UP(1*sizeof(float));
    reallocConstArrays(consts_bytes);
    consts_bytes = 0;
    arg0.data   = OP_consts_h + consts_bytes;
    arg0.data_d = OP_consts_d + consts_bytes;
    for ( int d=0; d<1; d++ ){
      ((float *)arg0.data)[d] = arg0h[d];
    }
    consts_bytes += ROUND_UP(1*sizeof(float));
    arg1.data   = OP_consts_h + consts_bytes;
    arg1.data_d = OP_consts_d + consts_bytes;
    for ( int d=0; d<1; d++ ){
      ((float *)arg1.data)[d] = arg1h[d];
    }
    consts_bytes += ROUND_UP(1*sizeof(float));
    mvConstArraysToDevice(consts_bytes);

    //set CUDA execution parameters
    #ifdef OP_BLOCK_SIZE_2
      int nthread = OP_BLOCK_SIZE_2;
    #else
      int nthread = OP_block_size;
    #endif

    int nblocks = 200;

    op_cuda_Friction_manning<<<nblocks,nthread>>>(
      (float *) arg0.data_d,
      (float *) arg1.data_d,
      (float *) arg2.data_d,
      set->size );
  }
  op_mpi_set_dirtybit_cuda(nargs, args);
  if (OP_diags>1) {
    cutilSafeCall(cudaDeviceSynchronize());
  }
  //update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[2].time     += wall_t2 - wall_t1;
  OP_kernels[2].transfer += (float)set->size * arg2.size * 2.0f;
}
