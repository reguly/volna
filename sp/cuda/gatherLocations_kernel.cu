//
// auto-generated by op2.py
//

//user function
__device__ void gatherLocations_gpu( const float *values, const float *zmin, float *dest) {
  dest[0] = values[0] + (values[3] - values[0] + *zmin);
  dest[1] = values[0];
  dest[2] = values[1]/values[0];
  dest[3] = values[2]/values[0];
  dest[4] = values[3];

}

// CUDA kernel function
__global__ void op_cuda_gatherLocations(
  const float *__restrict ind_arg0,
  const int *__restrict opDat0Map,
  const float *arg1,
  float *arg2,
  int start,
  int end,
  int   set_size) {
  int tid = threadIdx.x + blockIdx.x * blockDim.x;
  if (tid + start < end) {
    int n = tid + start;
    //initialise local variables
    int map0idx;
    map0idx = opDat0Map[n + set_size * 0];

    //user-supplied kernel call
    gatherLocations_gpu(ind_arg0+map0idx*4,
                    arg1,
                    arg2+n*5);
  }
}


//host stub function
void op_par_loop_gatherLocations(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2){

  float*arg1h = (float *)arg1.data;
  int nargs = 3;
  op_arg args[3];

  args[0] = arg0;
  args[1] = arg1;
  args[2] = arg2;

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(27);
  op_timers_core(&cpu_t1, &wall_t1);
  OP_kernels[27].name      = name;
  OP_kernels[27].count    += 1;


  int    ninds   = 1;
  int    inds[3] = {0,-1,-1};

  if (OP_diags>2) {
    printf(" kernel routine with indirection: gatherLocations\n");
  }
  int set_size = op_mpi_halo_exchanges_grouped(set, nargs, args, 2);
  if (set_size > 0) {

    //transfer constants to GPU
    int consts_bytes = 0;
    consts_bytes += ROUND_UP(1*sizeof(float));
    reallocConstArrays(consts_bytes);
    consts_bytes = 0;
    arg1.data   = OP_consts_h + consts_bytes;
    arg1.data_d = OP_consts_d + consts_bytes;
    for ( int d=0; d<1; d++ ){
      ((float *)arg1.data)[d] = arg1h[d];
    }
    consts_bytes += ROUND_UP(1*sizeof(float));
    mvConstArraysToDevice(consts_bytes);

    //set CUDA execution parameters
    #ifdef OP_BLOCK_SIZE_27
      int nthread = OP_BLOCK_SIZE_27;
    #else
      int nthread = OP_block_size;
    #endif

    for ( int round=0; round<2; round++ ){
      if (round==1) {
        op_mpi_wait_all_grouped(nargs, args, 2);
      }
      int start = round==0 ? 0 : set->core_size;
      int end = round==0 ? set->core_size : set->size + set->exec_size;
      if (end-start>0) {
        int nblocks = (end-start-1)/nthread+1;
        op_cuda_gatherLocations<<<nblocks,nthread>>>(
        (float *)arg0.data_d,
        arg0.map_data_d,
        (float*)arg1.data_d,
        (float*)arg2.data_d,
        start,end,set->size+set->exec_size);
      }
    }
  }
  op_mpi_set_dirtybit_cuda(nargs, args);
  if (OP_diags>1) {
    cutilSafeCall(cudaDeviceSynchronize());
  }
  //update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[27].time     += wall_t2 - wall_t1;
}
