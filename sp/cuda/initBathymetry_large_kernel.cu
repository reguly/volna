//
// auto-generated by op2.py
//

//user function
__device__ void initBathymetry_large_gpu( float *values, const float *cellCenter,
	const float *node0, const float *node1, const float *node2,
	const float *bathy0, const float *bathy1, const float *bathy2) {

	bool isInside = false;


	float xmin = MIN(MIN(node0[0], node1[0]), node2[0]);
	float xmax = MAX(MAX(node0[0], node1[0]), node2[0]);
	float ymin = MIN(MIN(node0[1], node1[1]), node2[1]);
	float ymax = MAX(MAX(node0[1], node1[1]), node2[1]);

	if ( ( cellCenter[0] < xmin ) || ( cellCenter[0] > xmax ) ||
		( cellCenter[1] < ymin ) || ( cellCenter[1] > ymax ) ) {
		isInside = false;
	}else{



		float insider = 1.0f;
		float p[2] = {cellCenter[0], cellCenter[1]};

#define ORIENT2D(pA, pB, pC) (pA[0] - pC[0]) * (pB[1] - pC[1]) - (pA[1] - pC[1]) * (pB[0] - pC[0])
    if ( ORIENT2D(node0, node1, node2) > 0 ) {
    	insider =  ORIENT2D( node0, p, node2);
    	insider *= ORIENT2D( node0, node1, p);
    	insider *= ORIENT2D( node1, node2, p);
    }
    else {
    	insider =  ORIENT2D( node0, p, node1);
    	insider *= ORIENT2D( node0, node2, p);
    	insider *= ORIENT2D( node2, node1, p);
    }
    isInside = insider >= 0.0f;
	}

  if (isInside) {

    float a =  (node1[1]-node0[1])*(*bathy2-*bathy0)-(node2[1]-node0[1])*(*bathy1-*bathy0);
    float b = -(node1[0]-node0[0])*(*bathy2-*bathy0)+(node2[0]-node0[0])*(*bathy1-*bathy0);
    float c =  (node1[0]-node0[0])*(node2[1]-node0[1])-(node2[0]-node0[0])*(node1[1]-node0[1]);

    *values += *bathy0 - (a*(cellCenter[0]-node0[0]) + b*(cellCenter[1]-node0[1]))/c;
  }

}

// CUDA kernel function
__global__ void op_cuda_initBathymetry_large(
  float *__restrict ind_arg0,
  const float *__restrict ind_arg1,
  const float *__restrict ind_arg2,
  const float *__restrict ind_arg3,
  const int *__restrict opDat0Map,
  const int *__restrict opDat2Map,
  int start,
  int end,
  int   set_size) {
  int tid = threadIdx.x + blockIdx.x * blockDim.x;
  if (tid + start < end) {
    int n = tid + start;
    //initialise local variables
    float arg0_l[1];
    for ( int d=0; d<1; d++ ){
      arg0_l[d] = ZERO_float;
    }
    int map0idx;
    int map2idx;
    int map3idx;
    int map4idx;
    map0idx = opDat0Map[n + set_size * 0];
    map2idx = opDat2Map[n + set_size * 0];
    map3idx = opDat2Map[n + set_size * 1];
    map4idx = opDat2Map[n + set_size * 2];

    //user-supplied kernel call
    initBathymetry_large_gpu(arg0_l,
                         ind_arg1+map0idx*2,
                         ind_arg2+map2idx*2,
                         ind_arg2+map3idx*2,
                         ind_arg2+map4idx*2,
                         ind_arg3+map2idx*1,
                         ind_arg3+map3idx*1,
                         ind_arg3+map4idx*1);
    atomicAdd(&ind_arg0[0+map0idx*1],arg0_l[0]);
  }
}


//host stub function
void op_par_loop_initBathymetry_large(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7){

  int nargs = 8;
  op_arg args[8];

  args[0] = arg0;
  args[1] = arg1;
  args[2] = arg2;
  args[3] = arg3;
  args[4] = arg4;
  args[5] = arg5;
  args[6] = arg6;
  args[7] = arg7;

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(16);
  op_timers_core(&cpu_t1, &wall_t1);
  OP_kernels[16].name      = name;
  OP_kernels[16].count    += 1;


  int    ninds   = 4;
  int    inds[8] = {0,1,2,2,2,3,3,3};

  if (OP_diags>2) {
    printf(" kernel routine with indirection: initBathymetry_large\n");
  }
  int set_size = op_mpi_halo_exchanges_grouped(set, nargs, args, 2);
  if (set_size > 0) {

    //set CUDA execution parameters
    #ifdef OP_BLOCK_SIZE_16
      int nthread = OP_BLOCK_SIZE_16;
    #else
      int nthread = OP_block_size;
    #endif

    for ( int round=0; round<2; round++ ){
      if (round==1) {
        op_mpi_wait_all_grouped(nargs, args, 2);
      }
      int start = round==0 ? 0 : set->core_size;
      int end = round==0 ? set->core_size : set->size + set->exec_size;
      if (end-start>0) {
        int nblocks = (end-start-1)/nthread+1;
        op_cuda_initBathymetry_large<<<nblocks,nthread>>>(
        (float *)arg0.data_d,
        (float *)arg1.data_d,
        (float *)arg2.data_d,
        (float *)arg5.data_d,
        arg0.map_data_d,
        arg2.map_data_d,
        start,end,set->size+set->exec_size);
      }
    }
  }
  op_mpi_set_dirtybit_cuda(nargs, args);
  if (OP_diags>1) {
    cutilSafeCall(cudaDeviceSynchronize());
  }
  //update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[16].time     += wall_t2 - wall_t1;
}
